{"ast":null,"code":"var _jsxFileName = \"/Users/akshaybatra/Workspace/dynamic-boxes-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [boxes, setBoxes] = useState([{\n    id: 1,\n    color: 'red'\n  }, {\n    id: 2,\n    color: 'blue'\n  }]);\n  const addBox = () => {\n    const newBox = {\n      id: boxes.length + 1,\n      color: getRandomColor()\n    };\n    setBoxes(prevBoxes => [...prevBoxes, newBox]);\n  };\n  const removeBox = id => {\n    const updatedBoxes = boxes.filter(box => box.id !== id);\n    setBoxes(updatedBoxes);\n  };\n  const getRandomColor = () => {\n    const colors = ['green', 'yellow', 'purple', 'orange'];\n    const randomIndex = Math.floor(Math.random() * colors.length);\n    return colors[randomIndex];\n  };\n  const renderArrows = () => {\n    const arrows = [];\n    for (let i = 1; i < boxes.length; i++) {\n      const arrow = /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: 60 * (i - 1) + 40,\n        y1: 30,\n        x2: 60 * i + 20,\n        y2: 30,\n        stroke: \"black\",\n        markerEnd: \"url(#arrowhead)\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n      arrows.push(arrow);\n    }\n    return arrows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dynamic Boxes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addBox,\n      children: \"Add Box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"marker\", {\n        id: \"arrowhead\",\n        markerWidth: \"10\",\n        markerHeight: \"7\",\n        refX: \"8\",\n        refY: \"3.5\",\n        orient: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0 0, 10 3.5, 0 7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), boxes.map(box => {\n      {\n        renderArrows();\n      }\n      /*#__PURE__*/_jsxDEV(\"rect\", {\n        className: \"box\",\n        fill: box.color,\n        onClick: () => removeBox(box.id)\n      }, box.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sgzrFdnRFsc3J1ORwRqBmKIvqlY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","boxes","setBoxes","id","color","addBox","newBox","length","getRandomColor","prevBoxes","removeBox","updatedBoxes","filter","box","colors","randomIndex","Math","floor","random","renderArrows","arrows","i","arrow","x1","y1","x2","y2","stroke","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","push","className","children","onClick","markerWidth","markerHeight","refX","refY","orient","points","map","fill","_c","$RefreshReg$"],"sources":["/Users/akshaybatra/Workspace/dynamic-boxes-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [boxes, setBoxes] = useState([\n    { id: 1, color: 'red' },\n    { id: 2, color: 'blue' },\n  ]);\n\n  const addBox = () => {\n    const newBox = {\n      id: boxes.length + 1,\n      color: getRandomColor(),\n    };\n    setBoxes((prevBoxes) => [...prevBoxes, newBox]);\n  };\n\n  const removeBox = (id) => {\n    const updatedBoxes = boxes.filter((box) => box.id !== id);\n    setBoxes(updatedBoxes);\n  };\n\n  const getRandomColor = () => {\n    const colors = ['green', 'yellow', 'purple', 'orange'];\n    const randomIndex = Math.floor(Math.random() * colors.length);\n    return colors[randomIndex];\n  };\n\n  const renderArrows = () => {\n    const arrows = [];\n    for (let i = 1; i < boxes.length; i++) {\n      const arrow = (\n        <line\n          key={i}\n          x1={60 * (i - 1) + 40}\n          y1={30}\n          x2={60 * i + 20}\n          y2={30}\n          stroke=\"black\"\n          markerEnd=\"url(#arrowhead)\"\n        />\n      );\n      arrows.push(arrow);\n    }\n    return arrows;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic Boxes</h1>\n      <button onClick={addBox}>Add Box</button>\n        <defs>\n          <marker\n            id=\"arrowhead\"\n            markerWidth=\"10\"\n            markerHeight=\"7\"\n            refX=\"8\"\n            refY=\"3.5\"\n            orient=\"auto\"\n          >\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\n          </marker>\n        </defs>\n        \n        {boxes.map((box) => {\n          {renderArrows()}\n          <rect\n            key={box.id}\n            className=\"box\"\n            fill={box.color}\n            onClick={() => removeBox(box.id)}\n          />\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}